version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0
  aws-code-deploy: circleci/aws-code-deploy@2.0.0

# workflows:
#   version: 2.1
#   build-copy-deploy:
#     jobs:
#       - build-copy:
#            context:
#              - aws-go-deploy
#       # - deploy:
#       #     requires:
#       #       - build-copy
#       #     filters:
#       #       branches:
#       #         only: main
jobs:
  build:
    docker:
      - image: circleci/golang:1.16.3-browsers
    
    parallelism: 2
    environment:                      # environment variables for the build itself
      TEST_ENV: test-env              # path to where test results will be saved
    
    steps:
      - checkout
      - run:
          name: The First Step
          command: |
            echo 'Hello World!'
            echo 'This is the delivery pipeline'
      - run:
          name: List code contents 
          command: |
            echo 'This is where the code is read'
            ls -la
      - run:
          name: Check go version
          command: |
            go version

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      # Save cache after go work
      - run:
          name: Build Go code
          command: | 
            go build -o circleci
            
      - aws-s3/copy:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_KEY
          from: circleci
          to: 's3://circle-ci-gobuild'
          #overwrite: true # default false

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
  
  # deploy:
#   Run-After-Hello:
#     docker:
#       - image: circleci/postgres:9.5.20-alpine
#     steps:
#       - run:
#           name: The Second Job
#           command: |
#             echo 'Hello World againnn - with postgres!'
# workflows:
#  version: 2
#  TestWorkflow:
#     jobs:
#       - Hello-World
#       - Run-After-Hello:
#           requires:
#             - Hello-World
